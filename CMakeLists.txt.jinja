cmake_minimum_required(VERSION 3.30)

{% if use_cpp23 %}
set (CMAKE_CXX_STANDARD 23)
# Check for GCC or Clang and add the -fmodules-ts flag
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
  message(STATUS "Using GCC")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fmodules-ts")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  message(STATUS "Using Clang")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fmodules")
else()
  message(WARNING "Unknown compiler")
endif()
{% else %}
set (CMAKE_CXX_STANDARD 20)
{% endif %}
set (CMAKE_CXX_STANDARD_REQUIRED True)

set (TARGET_NAME  {{project_name}})
set (PROJECT_NAME {{project_name}})

# have CMake export the commands we need to send to the compiler (things
# like include path and compiler switches). This writes the file
# compile_commands.json to the build folder where the c_cpp_properties.json
# file will refer to it and use it for vscode's intellisense
# compiler settings
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# make sure vcpkg environment variables are set
if (NOT DEFINED ENV{VCPKG_ROOT} OR NOT DEFINED ENV{VCPKG_DEFAULT_TRIPLET})
  message(NOTICE "The VCPKG_ROOT and VCPKG_DEFAULT_TRIPLET env vars must be defined")
  message(FATAL_ERROR "See https://learn.microsoft.com/en-us/vcpkg/ for documentation")
  endif()

# define a local variable for vcpkg_root directory
set(VCPKG_ROOT_DIR $ENV{VCPKG_ROOT})
message("${VCPKG_ROOT_DIR}")

# Tell CMake where to find vcpkg's CMake toolchain file
set(CMAKE_TOOLCHAIN_FILE "${VCPKG_ROOT_DIR}/scripts/buildsystems/vcpkg.cmake" CACHE PATH "")

# Add the DEBUG definition for debug builds, assures we can use
# the same define for debug builds across platforms
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  add_compile_definitions(-DDEBUG)
endif()

project(PROJECT_NAME)

add_executable(${TARGET_NAME} src/main.cpp)

{% if include_fmt %}
find_package(fmt CONFIG REQUIRED)
{% endif %}

{% if include_logging %} 
find_package(spdlog CONFIG REQUIRED) 
{% endif %}

{% if include_imgui %}
find_package(glfw3 CONFIG REQUIRED)
find_package(implot CONFIG REQUIRED)
find_package(OpenGL REQUIRED)
find_package(GLEW REQUIRED)
find_package(GLUT REQUIRED)
find_package(glm REQUIRED)
find_package(imgui CONFIG REQUIRED)
{% endif %}

target_include_directories(${TARGET_NAME}
  PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include"
)

target_link_libraries(${TARGET_NAME}
  {% if include_fmt %} PRIVATE fmt::fmt {% endif %}
  {% if include_logging %} PRIVATE spdlog::spdlog  {% endif %}
  {% if include_imgui %} 
  PRIVATE
    glfw
    OpenGL::GL
    GLEW::GLEW
    GLUT::GLUT
    imgui::imgui
    glm::glm
  {% endif %}
)

